<?php
// $Id: solr_base_query.test,v 1.1.4.10 2009/04/12 03:16:33 pwolanin Exp $


/***
 * JacobSingh: Warning! This test is totally broken because of the addition of the "hash" in apachesolr_search.module.
 * Needs to be moved out.
 *
 */


class DrupalSolrQueryTests extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => 'Query handling',
      'description' => 'Throw various queries at the query object and make sure they all parse correctly.',
      'group' => 'ApacheSolr'
    );
  }

  function setUp() {
    parent::setUp('search', 'apachesolr');
  }

  private $queries = array(
    'foo',
    'foo bar',
    'foo bar "hubba baz"',
    'uid:1',
    'uid:1 uid:2',
    'foo bar uid:1 uid:2',
    'foo bar "I love you"',
    'foo bar baz -hubba',
    'foo -bar -term:31',
    'foo*',
    'foo?',
    'somefield:"I love you"',
  );

  function testParseSimple() {
    foreach ($this->queries as $string) {
      $query = apachesolr_drupal_query($string, TRUE);
      // force the query to be rebuilt without removing any fields.
      $query->remove_filter('fake-field-name');
      $this->assertEqual($string, $query->get_query());
    }
  }

  function testAddTerm() {
    foreach ($this->queries as $string) {
      $query = apachesolr_drupal_query($string, TRUE);
      $query->add_filter('wham', '1');
      $this->assertEqual($string . ' wham:1', $query->get_query());
    }
  }

  function testRemoveTerm() {
    $string = 'foo';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('', 'foo');
    $this->assertEqual('foo', $query->get_query());

    $string = 'foo bar';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('', 'foo');
    $this->assertEqual('foo bar', $query->get_query());

    $string = 'foo uid:1 bar';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('uid', '1');
    $this->assertEqual('foo bar', $query->get_query());

    $string = 'foo uid:1 bar';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('uid');
    $this->assertEqual('foo bar', $query->get_query());

    $string = 'foo uid:1 bar uid:2 tid:3';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('uid', '1');

    // Not very beautiful, but probably best way there is:
    $pass = TRUE;
    $components = array('foo', 'bar', 'uid:2', 'tid:3');
    $q = $query->get_query();
    if (count($components) != count(explode(' ', $q))) {
      $pass = FALSE;
    }
    else {
      foreach ($components as $s) {
        if (strpos($q, $s) === FALSE) {
          $pass = FALSE;
          break;
        }
      }
    }
    if ($pass) {
      $this->assertEqual($q, $q);
    }
    else {
      $this->assertEqual('foo bar tid:3 uid:2', $q);
    }

    $string = 'foo uid:1 bar uid:2 tid:3';
    $query = apachesolr_drupal_query($string, TRUE);
    $query->remove_filter('uid');
    $this->assertEqual('foo bar tid:3', $query->get_query());
  }
}
