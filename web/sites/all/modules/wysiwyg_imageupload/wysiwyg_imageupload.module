<?php
// $Id$
// Copyright (c) 2010 KontextWork GbR
// Author: Eugen Mayer

require_once('wysiwyg_imageupload.file.inc');
require_once('wysiwyg_imageupload.form.inc');
require_once('wysiwyg_imageupload.ajax.inc');
require_once('wysiwyg_imageupload.filter.inc');
require_once('views/wysiwyg_imageupload.views.inc');

/**
 * Implementation of hook_help().
 */
function wysiwyg_imageupload_help($path, $arg) {
  switch ($path) {
    case 'admin/help#wysiwyg_imageupload':
      $output = t('<p>An image upload dialog for most WYSIWYG Editors.<h2>Full Installation</h2>
<ul>
<li>You need to have a <a href="http://drupal.org/project/wysiwyg" target="_blank">WYSIWYG</a>-compatible editor enabled
<li>Check the <a href="http://drupal.org/node/808626" target="_blank">Installation How-to</a>
<li>Also refer to the <a href="http://drupal.org/project/wysiwyg_imageupload" target="_blank">WYSIWYG image upload</a> home page
</ul></p>');
      return $output;
  }
}

/**
 * Implementes hook_menu().
 */
function wysiwyg_imageupload_menu() {
  $items = array();
  $items['wysiwyg_imageupload/upload/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_upload_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );
  // Render for WYSIWYG
  $items['ajax/wysiwyg_imgupl/render_wysiwyg/%'] = array(
    'page callback' => '_wysiwyg_imageupload_render_wysiwyg',
    'page arguments' => array(3),
    'access callback' => '_wysiwyg_imageupload_access',
    'access arguments' => array( 3, 'view'),
    'type' => MENU_CALLBACK,
  );
  // return multiple rendered images
  $items['ajax/wysiwyg_imgupl/render_wysiwyg_images/%'] = array(
    'page callback' => '_wysiwyg_imageupload_render_wysiwyg_images',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );
  // Form for editing an image
  $items['wysiwyg_imageupload/edit/%'] = array(
    'page callback' => 'drupal_get_form',
    // Be aware that we dont need 2,3 as argument here, eventhough we will expect them
    // it seems like they are passed automatically when % stands for multiple arguments
    // ( when it is used as the last part of the path )
    // That means, if we call the callback this way :
    // wysiwyg_imageupload/edit/12/foo/bar/cat/dog the from callback will be called as
    // wysiwyg_imageupload_edit_form($form_state,12,foo,bar,cat,dog) !!
    // even though we dont have the page arguments set like this : array('wysiwyg_imageupload_edit_form',2,3,4,5),
    // IF you set those arguments, they will be provided twice in the later form callback, so rather
    // wysiwyg_imageupload_edit_form($form_state,12,foo,bar,cat,dog,12,foo,bar,cat,dog)
    // what is not exepected and especially bad if you have optional parameters (which will get overridden then)
    'page arguments' => array('wysiwyg_imageupload_edit_form', 2),
    'access callback' => '_wysiwyg_imageupload_access',
    'access arguments' => array(2,'update'),
    'type' => MENU_CALLBACK,
  );

  // Form for editing an image
  $items['wysiwyg_imageupload/reuse/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_edit_form', 2, 3, TRUE),
    'access callback' => '_wysiwyg_imageupload_access',
    'access arguments' => array(2,'view'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/wysiwyg_imageupload'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'WYSIWYG Image upload',
    'description' => 'Configuration options for the WYSIWYG Image upload module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wysiwyg_imageupload.admin.inc'
  );

  return $items;
}

/**
 * Implementing the hook_wysiwyg_include_directory().
 * This is needed to register our WYSIWYG Plugin
 */
function wysiwyg_imageupload_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
 * Access check for iid`s. There are several cases to cover
 * - An iid is part of a node
    view/update: Apply node permissions
 * - An iid is part of a comment. 
    view: Apply node permissions
    update: The author or admin can edit it
 * - And iid is part of any other unknown relation or not part of any relation at all
    view: Author only
    update: Author only
 *
 * The author is determined by the fid author.
 */

function _wysiwyg_imageupload_access($iid, $op) {
  global $user;
  /*********** CASE 1: Admin or not ******/
  // If its an admin or someone with administer content, return true
  if($user->uid == 1 || user_access('administer nodes')) {
    return TRUE;
  }

  // Lets see, if this iid has any relation
  $e = _wysiwyg_imageupload_load_inline_entity($iid);  
  // Get the relation type
  $relation = 'unknown';
  $parent = NULL;
  if($e->cid != 0) {
    $parent = _comment_load($e->cid);    
    // if op is view, use the node relation
    if($op == 'view') {
      // get the node as parent
      $parent = node_load($parent->nid);
      $relation = 'node';
    }
    else {
      $relation = 'comment';
    }

    if($parent == NULL) {
      // if the node does not exist, deny
      return FALSE;
    }
  }
  else if($e->nid != 0) {    
    $parent = node_load($e->nid);    
    $relation = 'node';
    if($parent == NULL) {
      // if the node does not exist, deny
      return FALSE;
    }
  }
  
  // Ok as we looked for the relation, finally check the permissions.
  switch($relation) {
    case 'node':
      /*********** CASE 2: its a node relation ******/
      // Call any hooks implementing our access API. If none, use node_access as the default one.
      $modules = module_implements('wysiwyg_imageupload_access');
      if(count($modules) > 0) {
        $grants = module_invoke_all('wysiwyg_imageupload_access',$op,$parent);
        $result = true;
        foreach($grants as $bool) {
          $return = $return && $bool;
        }
        return $result;
      }
      // else
      return node_access($op,$parent);
    break;
    case 'comment':
      /*********** CASE 3: its a comment relation ******/
      // we only get here for edit op, so check for the author
      // as the check for the admin has been done before
      if($op == 'update') {
        // Thanks to drupal consistency...you "edit" a comment and "update" a node..
        // so we need to swtich here, as comment access understands "edit"
        $op = 'edit';
      }
      return comment_access($op,$parent);
    break;
    default:  
      /*********** CASE 4: No relation (newly uploaded) or unknown ******/
      // Grant for author only
      // $e->uid is the uid out of the files table
      if($e->uid == $user->uid) {
        return TRUE;
      }
      //else
      return FALSE;
    break;
  }
  // we cant get here actually, anyway return FALSE
  return FALSE;
}

/**
 * Adding general styles like floating and default style
 */
function wysiwyg_imageupload_init() {
  drupal_add_css(drupal_get_path('module', 'wysiwyg_imageupload') . '/plugins/imgupload/imgupload.css');
}

/**
 * Implementation of hook_perm().
 */
function wysiwyg_imageupload_perm() {
  return array('use wysiwyg image upload');
}

/**
 * Implementation of hook_nodeapi().
 */
function wysiwyg_imageupload_nodeapi(&$node, $op, $teaser) {
  switch ($op) {
    case 'load':
      $output['imgupload_images'] = _wysiwyg_imageupload_load($node);
      return $output;
    break;
    case 'insert':
    case 'update':
      if (user_access('use wysiwyg image upload')) {
        // remove the filter cache
        _wysiwyg_imageupload_reset_filter_cache($node->format, $node->body);
        _wysiwyg_imageupload_save($node);
      }
      break;
    case 'delete':
      _wysiwyg_imageupload_handle_node_delete($node->nid);
    break;
  }
}

/**
 * Implementation of hook_comment().
 */
function wysiwyg_imageupload_comment(&$a1, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      $comment = $a1;
      if (user_access('use wysiwyg image upload')) {
        _wysiwyg_imageupload_save($comment);
        _wysiwyg_imageupload_reset_filter_cache($comment->format, $comment->body);
      }
      break;
  }
}

/**
 * API: returns the filepath of a file
 * @fid: the file id
 */
function wysiwyg_imageupload_get_imageurl($fid) {
  return db_result(db_query('SELECT filepath FROM {files} WHERE fid=%d', $fid));
}

/**
 * API: loads a file-object using the path as key
 * @path: the path of the file
 */
function wysiwyg_imageupload_get_file($path) {
  return db_fetch_object(db_query('SELECT * from {files} where filepath="%s"', $path));
}

/**
 * API: Returns the file-object
 * @fid: the file-id
 */
function wysiwyg_imageupload_load_file($fid) {
  return db_fetch_object(db_query('SELECT * from {files} where fid="%d"', $fid));
}

/**
 * API: Use this method to get uploaded images as a 'list'.
 * Images are sorted by date (youngest first).
 * @limit: limit the result set to a specific number
 * @uid: Only images uploaded by that user are returned
 */
function wysiwyg_imageupload_get_images($limit = NULL, $uid = NULL, $group = NULL) {
  if ($limit != NULL) {
    $limit = " LIMIT $limit";
  }
  if ($group != NULL) {
    $group = " GROUP BY $group";
  }
  if ($uid != NULL) {
    $result = db_query('SELECT f.*,w.* as parent_nid FROM {files} as f RIGHT JOIN {wysiwyg_imageupload_entity} AS w on w.fid = f.fid WHERE f.uid = %d' . $group . ' ORDER BY f.timestamp DESC' . $limit, $uid);
  }
  else {
    $result = db_query('SELECT f.*,w.* as parent_nid FROM {files} as f RIGHT JOIN {wysiwyg_imageupload_entity} AS w on w.fid = f.fid' . $group . ' ORDER BY f.timestamp DESC' . $limit);
  }

  if ($result != FALSE) {
    $images = array();
    while ($row = db_fetch_array($result)) {
      $images[] = $row;
    };
    return $images;
  }
  // else
  return array();
}

/**
 * Get all images of a nodes
 * If a image is used several times in a node, it is only returned once
 */
function wysiwyg_imageupload_get_images_by_vids($vids = array()) {
  if (!is_array($vids) || count($vids) === 0) {
    return array();
  }
  $result = db_query('
  SELECT * FROM {wysiwyg_imageupload_entity}_revision AS wuir
  	LEFT JOIN {wysiwyg_imageupload_entity} AS wui ON wuir.iid=wui.iid
  	LEFT JOIN {files} AS f ON wui.fid=f.fid
  	WHERE vid in (' . db_placeholders($vids, 'int') . ')
  	GROUP BY f.fid', $vids);

  if ($result != FALSE) {
    $images = array();
    while ($row = db_fetch_array($result)) {
      $images[] = $row;
    };
    return $images;
  }
  // else
  return array();
}

/**
 *  Those presets are needed for the browser and the details form
 */
function wysiwyg_imageupload_imagecache_default_presets() {
  $presets = array();
  $presets['wysiwyg_imageupload_preview'] = array(
    'presetname' => 'wysiwyg_imageupload_preview',
    'actions' => array(
      0 => array(
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => array(
          'height' => '150',
          'width' => '220',
          'upscale' => 1,
        ),
      ),
    )
  );

  return $presets;
}

/**
 * Implementation of hook_theme().
 * wysiwyg_imageupload_render_image: renders the image for the node view
 * wysiwyg_imageupload_render_image_wysiwyg: renders the view for the wysiwyg editor. DONT CHANGE THIS
 */
function wysiwyg_imageupload_theme() {
  return array(
    'wysiwyg_imageupload_render_image_entity' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
    'wysiwyg_imageupload_render_image' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
    ),
    ),
    'wysiwyg_imageupload_render_meta' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
    ),
    ),
    'wysiwyg_imageupload_render_container' => array(
      'arguments' => array(
        'image',
        'meta',
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
    'wysiwyg_imageupload_render_image_wysiwyg' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function wysiwyg_imageupload_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * wysiwyg_imageupload_render_image: renders the image for the node view
 */
function theme_wysiwyg_imageupload_render_image_entity($img_obj, $arguments) {
  $image = theme('wysiwyg_imageupload_render_image', $img_obj, $arguments);
  $meta = theme('wysiwyg_imageupload_render_meta', $img_obj, $arguments);
  return theme('wysiwyg_imageupload_render_container', $image, $meta, $img_obj, $arguments);
}

/**
 * wysiwyg_imageupload_render_image: renders the image for the node view
 */
function theme_wysiwyg_imageupload_render_image($img_obj, $arguments) {
  $attributes = array(
    'class' => 'imagecache wysiwyg_imageupload ' . $img_obj->style . ' imagecache imagecache-' . $img_obj->imagecache,
    'style' => '',
  );

  $do_getsize = TRUE;
  // If the use set custom sizes
  if ($arguments['width'] != '') {
    $attributes['width'] = $arguments['width'];
  }

  if ($arguments['height'] != '') {
    $attributes['height'] = $arguments['height'];
  }

  if (isset($attributes['height']) || isset($attributes['width'])) {
    $do_getsize = FALSE;
  }

  $inline_args = $img_obj->iid;
  drupal_alter('wysiwyg_imageupload_image_attribute', $attributes, $img_obj);

  $output = theme('imagecache', $img_obj->imagecache, $img_obj->filepath, $inline_args, $img_obj->title, $attributes, $do_getsize);
  drupal_alter('wysiwyg_imageupload_rendered_image', $output, $img_obj);
  return $output;
}


/**
 * Renders the meta data of an image. By default only the title
 */
function theme_wysiwyg_imageupload_render_meta($img_obj, $arguments) {
  $output = '';
  if ($img_obj->title != '') {
    $output .= "<span class='image_title'>{$img_obj->title}</span>";
  }
  return $output;
}

/**
 * Renders the meta container of an image.
 */
function theme_wysiwyg_imageupload_render_container($image, $meta, $img_obj, $arguments) {
  return "<span class='wysiwyg_imageupload image {$img_obj->alignment} {$img_obj->style}'>$image <span class='image_meta'>$meta</span></span>";
}

/**
 * wysiwyg_imageupload_render_image_wysiwyg: renders the view for the wysiwyg editor. DONT CHANGE THIS
 */
function theme_wysiwyg_imageupload_render_image_wysiwyg($img_obj, $arguments = array()) {
  $inline_args = $img_obj->iid;
  $attributes = array(
    'class' => 'wysiwyg_imageupload ' . $img_obj->alignment . ' ' . $img_obj->style,
  );
  $attributes += $arguments;

  $output = theme('imagecache', $img_obj->imagecache, $img_obj->filepath, $inline_args, $img_obj->title, $attributes, NULL, FALSE);
  return $output;
}

/**
 * Returns all the image styles to show in the selection
 */
function _wysiwyg_imageupload_get_image_styles() {
  // Must have the format: Descriptive=css_style,Descriptive2=css_style2..
  $settings = variable_get('wysiwyg_imageupload_imgstyles', '');
  $styles = array();
  if ($settings != '') {
    $styles_lines = array();
    $styles_lines = preg_split("/((\r(?!\n))|((?<!\r)\n)|(\r\n))/", $settings);
    foreach ($styles_lines as $style) {
      $style = explode('=', $style);
      $styles[$style[1]] = t("!style", array('!style' => $style[0]));
    }
  }
  drupal_alter('wysiwyg_imageupload_image_styles', $styles);
  return $styles;
}

/**
 * Computes the array with all allowed presets
 */
function _wysiwyg_imagegupload_allowed_presets() {
  $defaults = array();
  $presets = imagecache_presets();
  foreach ($presets as $preset) {
    // We cant use the presetid here (http://drupal.org/node/694188).
    $defaults[$preset['presetname']] = t("!preset", array('!preset' => $preset['presetname']));
  }
  $presets_whitelist = variable_get('wysiwyg_imageupload_presets_whitelist', $defaults);
  // Get all disabled keys (value === 0).
  $disabled_presets = array_keys($presets_whitelist, 0, TRUE);

  // Remove those keys from the result.
  foreach ($disabled_presets as $value) {
    unset($presets_whitelist[$value]);
  }

  return $presets_whitelist;
}

/**
 * Checks if the current node has revisioning activated
 */
function _wysiwyg_imagegupload_revisions_activated($type) {
  // Is this content even in moderatation?
  $var = variable_get( "node_options_$type", array(0));
  if (array_search('revision', $var)) {
    return 1;
  }
  //else
  return 0;
}

function _wysiwyg_imageupload_check_dependencies(&$requirements = NULL) {
  $error = FALSE;
  if (!is_array($requirements) && module_exists('devel_themer') && (user_access('access devel theme information') || user_access('access devel information'))) {
    drupal_set_message(t('You cannot use wysiwyg_imageupload while the Theme Developer tool is enabled. It is highly recommended to <a href="!url">disable this module</a> unless it is actively being used.', array('!url' => url('admin/build/modules'))), 'error');
  }

  if (module_exists('jquery_ui')) {
    $jquiv = jquery_ui_get_version();
    if (!preg_match('@1\.[7,8]\.\d+@', $jquiv)) {
      $msg = 'Your jquery ui library version is to old to use wysiwyg_imageupload. You need at least 1.7.x and you are currently running ' . $jquiv . ' Please read <a href="http://drupal.org/node/809812">this howto</a> on how to fix this.';
      if (is_array($requirements)) {
        $requirements['wyiwyg_imageupload_jquery_ui']['description'] = $msg;
        $requirements['wyiwyg_imageupload_jquery_ui']['title'] = 'WYSIWYG imageupload: Jquery UI';
        $requirements['wyiwyg_imageupload_jquery_ui']['severity'] = REQUIREMENT_ERROR;
        $requirements['wyiwyg_imageupload_jquery_ui']['value'] = $jquiv;
      }
      else {
        drupal_set_message($msg, 'error', FALSE);
      }
      $error = TRUE;
    }
  }
  else {
    drupal_set_message('You dont have <a href="http://drupal.org/project/jquery_ui">jquery_ui</a> installed, so wysiwyg_imageupload wont work at all. You will also need at least 1.7.x of the jquery ui library . Check <a href="http://drupal.org/node/809812">this howto</a> on how to fix this.', 'error');
    $error = TRUE;
  }

  if (module_exists('jquery_update')) {
    $jqv = jquery_update_get_version();
    if (!preg_match('@1\.[3,4]\.\d+@', $jqv)) {
      $msg = 'Your jquery version is to old to use wysiwyg_imageupload. Therefore you need to install <a href="http://drupal.org/project/jquery_update">jquery_update</a> 6.2.x, not jquery_update 6.1.x. Please read point 3 at <a href="http://drupal.org/node/808626">this howto</a> to fix this.';
      if (is_array($requirements)) {
        $requirements['wyiwyg_imageupload_jquery_update']['description'] = $msg;
        $requirements['wyiwyg_imageupload_jquery_update']['title'] = 'WYSIWYG imageupload: JQuery Update';
        $requirements['wyiwyg_imageupload_jquery_update']['severity'] = REQUIREMENT_ERROR;
        $requirements['wyiwyg_imageupload_jquery_update']['value'] = $jqv;
      }
      else {
        drupal_set_message($msg, 'error', FALSE);
      }
      $error = TRUE;
    }
  }
  else {
    drupal_set_message('You dont have <a href="http://drupal.org/project/jquery_update">jquery_update</a> installed, so wysiwyg_imageupload wont work at all. You need to install <a href="http://drupal.org/project/jquery_update">jquery_update</a> 6.2.x, not jquery_update 6.1.x. Please read point 3 at <a href="http://drupal.org/node/808626">this howto</a> to fix this.', 'error');
    $error = TRUE;
  }

  if (module_exists('imageapi')) {
    $toolkits = imageapi_get_available_toolkits();
    if (!array($toolkits) || count($toolkits) == 0) {
      $msg = 'You need to have at least one ImageAPI library activated 6.2.x to use wysiwyg_imageupload. Please read point 4 at <a href="http://drupal.org/node/808626">this howto</a> on how to fix this. Go to your ' . l('modules page', 'admin/build/modules/list') . ' under section "imagecache"';
      if (is_array($requirements)) {
        $requirements['wyiwyg_imageupload_imageapi']['description'] = $msg;
        $requirements['wyiwyg_imageupload_imageapi']['title'] = 'WYSIWYG imageupload: ImageAPI library';
        $requirements['wyiwyg_imageupload_imageapi']['severity'] = REQUIREMENT_ERROR;
        $requirements['wyiwyg_imageupload_imageapi']['value'] = 'None activated';
      }
      else {
        drupal_set_message($msg, 'error', FALSE);
      }
      $error = TRUE;
    }
  }
  else {
    drupal_set_message('You need to have installed <a href="http://drupal.org/project/imageapi">imageapi</a> to use to use wysiwyg_imageupload.', 'error');
    $error = TRUE;
  }

  $roles = user_roles(FALSE, 'use wysiwyg image upload');
  if (!array($roles) || count($roles) == 0) {
    $msg = 'You did not give any role the "use wysiwyg image upload" permission, so nobody can use wysiwyg_imageupload. Please read point 8 at <a href="http://drupal.org/node/808626">this howto</a> on how to fix this.';
    if (is_array($requirements)) {
      $requirements['wyiwyg_imageupload_user_permissions']['description'] = $msg;
      $requirements['wyiwyg_imageupload_user_permissions']['title'] = 'WYSIWYG imageupload: User Permissions';
      $requirements['wyiwyg_imageupload_user_permissions']['severity'] = REQUIREMENT_ERROR;
      $requirements['wyiwyg_imageupload_user_permissions']['value'] = 'Not set';
    }
    else {
      drupal_set_message($msg, 'error', FALSE);
    }
    $error = TRUE;
  }
  return $error;
}


function _wysiwyg_imageupload_reset_filter_cache($format, $text) {
  $cid = $format . ':' . md5($text);
  cache_clear_all($cid, 'cache_filter');
}

/**
 * Converts a PHP variable into its Javascript equivalent.
 * This function is used instead of drupal_to_js to avoid malformed unicode encoded data when using <, > or &.
 */
function _wysiwyg_imageupload_to_js($var) {
  if (function_exists('json_encode')) {
    return str_replace(array('<', '>', '&'), array('\u003c', '\u003e', '\u0026'), json_encode($var));
  }
  else {
    return str_replace(array('\x3c', '\x3e', '\x26'), array('\u003c', '\u003e', '\u0026'), drupal_to_js($var));
  }
}
